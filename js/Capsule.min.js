!function(){const t=new THREE.Vector3,s=new THREE.Vector3,i=new THREE.Vector3;class a{constructor(t=new THREE.Vector3(0,0,0),s=new THREE.Vector3(0,1,0),i=1){this.start=t,this.end=s,this.radius=i}clone(){return new a(this.start.clone(),this.end.clone(),this.radius)}set(t,s,i){this.start.copy(t),this.end.copy(s),this.radius=i}copy(t){this.start.copy(t.start),this.end.copy(t.end),this.radius=t.radius}getCenter(t){return t.copy(this.end).add(this.start).multiplyScalar(.5)}translate(t){this.start.add(t),this.end.add(t)}checkAABBAxis(t,s,i,a,e,n,r,h,d){return(e-t<d||e-i<d)&&(t-n<d||i-n<d)&&(r-s<d||r-a<d)&&(s-h<d||a-h<d)}intersectsBox(t){return this.checkAABBAxis(this.start.x,this.start.y,this.end.x,this.end.y,t.min.x,t.max.x,t.min.y,t.max.y,this.radius)&&this.checkAABBAxis(this.start.x,this.start.z,this.end.x,this.end.z,t.min.x,t.max.x,t.min.z,t.max.z,this.radius)&&this.checkAABBAxis(this.start.y,this.start.z,this.end.y,this.end.z,t.min.y,t.max.y,t.min.z,t.max.z,this.radius)}lineLineMinimumPoints(a,e){const n=t.copy(a.end).sub(a.start),r=s.copy(e.end).sub(e.start),h=i.copy(e.start).sub(a.start),d=n.dot(r),c=n.dot(n),o=r.dot(r),u=r.dot(h),m=n.dot(h);let x,y;const l=c*o-d*d;if(Math.abs(l)<1e-10){const t=-u/o,s=(d-u)/o;Math.abs(t-.5)<Math.abs(s-.5)?(x=0,y=t):(x=1,y=s)}else x=(u*d+m*o)/l,y=(x*d-u)/o;y=Math.max(0,Math.min(1,y)),x=Math.max(0,Math.min(1,x));return[n.multiplyScalar(x).add(a.start),r.multiplyScalar(y).add(e.start)]}}THREE.Capsule=a}();